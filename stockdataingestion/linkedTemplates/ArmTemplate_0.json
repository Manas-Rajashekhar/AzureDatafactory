{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "stockdataingestion"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stockpricesdev.dfs.core.windows.net/"
		},
		"RestApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.alphavantage.co/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Balance_sheet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(string(dataset().ticker),'.csv')",
							"type": "Expression"
						},
						"folderPath": "balancesheet/quarterlyreports",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CashFlow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(string(dataset().ticker),'.csv')",
							"type": "Expression"
						},
						"folderPath": "cashflow/quarterlyreports",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncomeStatement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(string(dataset().ticker),'.csv')",
							"type": "Expression"
						},
						"folderPath": "incomestatement/quarterlyreports",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					},
					"datacategory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "rawjson"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					},
					"datacategory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@replace(toLower(dataset().datacategory),'_','')",
							"type": "Expression"
						},
						"fileSystem": "staging"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestBalanceSheet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('query?function=BALANCE_SHEET','&symbol=',dataset().ticker,'&apikey=09QIJOQMPBIML925')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestCashFlow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('query?function=CASH_FLOW','&symbol=',dataset().ticker,'&apikey=09QIJOQMPBIML925')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestIncomestatement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('query?function=INCOME_STATEMENT','&symbol=',dataset().ticker,'&apikey=09QIJOQMPBIML925')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestApi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ticker": {
						"type": "string"
					},
					"datacategory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('query?function=',string(dataset().datacategory),'&symbol=',dataset().ticker,'&apikey=09QIJOQMPBIML925')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SymbolsRefData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ticker_symbols.csv",
						"fileSystem": "symbolsref"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Balance_sheet",
								"type": "DatasetReference",
								"parameters": {
									"ticker": {
										"value": "@pipeline().parameters.ticker",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Balance_sheet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child-test-1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('category')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource_test",
											"type": "DatasetReference",
											"parameters": {
												"ticker": {
													"value": "@pipeline().parameters.ticker",
													"type": "Expression"
												},
												"datacategory": {
													"value": "@{item()}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet1_test",
											"type": "DatasetReference",
											"parameters": {
												"ticker": {
													"value": "@pipeline().parameters.ticker",
													"type": "Expression"
												},
												"datacategory": {
													"value": "@{item()}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ticker": {
						"type": "string"
					}
				},
				"variables": {
					"category": {
						"type": "Array",
						"defaultValue": [
							"BALANCE_SHEET",
							"CASH_FLOW",
							"INCOME_STATEMENT"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-14T04:48:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource_test')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Balancesheet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestBalanceSheet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Balance_sheet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     symbol as string",
						"}",
						"source(output(",
						"          body as (annualReports as (accumulatedDepreciationAmortizationPPE as string, capitalLeaseObligations as string, cashAndCashEquivalentsAtCarryingValue as long, cashAndShortTermInvestments as long, commonStock as long, commonStockSharesOutstanding as integer, currentAccountsPayable as long, currentDebt as long, currentLongTermDebt as string, currentNetReceivables as string, deferredRevenue as string, fiscalDateEnding as date, goodwill as long, intangibleAssets as long, intangibleAssetsExcludingGoodwill as long, inventory as long, investments as string, longTermDebt as long, longTermDebtNoncurrent as string, longTermInvestments as string, otherCurrentAssets as long, otherCurrentLiabilities as long, otherNonCurrentAssets as string, otherNonCurrentLiabilities as long, propertyPlantEquipment as long, reportedCurrency as string, retainedEarnings as long, shortLongTermDebtTotal as long, shortTermDebt as long, shortTermInvestments as integer, totalAssets as long, totalCurrentAssets as long, totalCurrentLiabilities as long, totalLiabilities as long, totalNonCurrentAssets as long, totalNonCurrentLiabilities as long, totalShareholderEquity as long, treasuryStock as long)[], quarterlyReports as (accumulatedDepreciationAmortizationPPE as string, capitalLeaseObligations as string, cashAndCashEquivalentsAtCarryingValue as long, cashAndShortTermInvestments as long, commonStock as long, commonStockSharesOutstanding as integer, currentAccountsPayable as long, currentDebt as long, currentLongTermDebt as string, currentNetReceivables as long, deferredRevenue as string, fiscalDateEnding as date, goodwill as long, intangibleAssets as long, intangibleAssetsExcludingGoodwill as long, inventory as long, investments as string, longTermDebt as long, longTermDebtNoncurrent as string, longTermInvestments as string, otherCurrentAssets as long, otherCurrentLiabilities as long, otherNonCurrentAssets as string, otherNonCurrentLiabilities as long, propertyPlantEquipment as long, reportedCurrency as string, retainedEarnings as long, shortLongTermDebtTotal as long, shortTermDebt as long, shortTermInvestments as string, totalAssets as long, totalCurrentAssets as long, totalCurrentLiabilities as long, totalLiabilities as long, totalNonCurrentAssets as long, totalNonCurrentLiabilities as long, totalShareholderEquity as long, treasuryStock as long)[], symbol as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.quarterlyReports, body.quarterlyReports),",
						"     mapColumn(",
						"          accumulatedDepreciationAmortizationPPE = body.quarterlyReports.accumulatedDepreciationAmortizationPPE,",
						"          capitalLeaseObligations = body.quarterlyReports.capitalLeaseObligations,",
						"          cashAndCashEquivalentsAtCarryingValue = body.quarterlyReports.cashAndCashEquivalentsAtCarryingValue,",
						"          cashAndShortTermInvestments = body.quarterlyReports.cashAndShortTermInvestments,",
						"          commonStock = body.quarterlyReports.commonStock,",
						"          commonStockSharesOutstanding = body.quarterlyReports.commonStockSharesOutstanding,",
						"          currentAccountsPayable = body.quarterlyReports.currentAccountsPayable,",
						"          currentDebt = body.quarterlyReports.currentDebt,",
						"          currentLongTermDebt = body.quarterlyReports.currentLongTermDebt,",
						"          currentNetReceivables = body.quarterlyReports.currentNetReceivables,",
						"          deferredRevenue = body.quarterlyReports.deferredRevenue,",
						"          fiscalDateEnding = body.quarterlyReports.fiscalDateEnding,",
						"          goodwill = body.quarterlyReports.goodwill,",
						"          intangibleAssets = body.quarterlyReports.intangibleAssets,",
						"          intangibleAssetsExcludingGoodwill = body.quarterlyReports.intangibleAssetsExcludingGoodwill,",
						"          inventory = body.quarterlyReports.inventory,",
						"          investments = body.quarterlyReports.investments,",
						"          longTermDebt = body.quarterlyReports.longTermDebt,",
						"          longTermDebtNoncurrent = body.quarterlyReports.longTermDebtNoncurrent,",
						"          longTermInvestments = body.quarterlyReports.longTermInvestments,",
						"          otherCurrentAssets = body.quarterlyReports.otherCurrentAssets,",
						"          otherCurrentLiabilities = body.quarterlyReports.otherCurrentLiabilities,",
						"          otherNonCurrentAssets = body.quarterlyReports.otherNonCurrentAssets,",
						"          otherNonCurrentLiabilities = body.quarterlyReports.otherNonCurrentLiabilities,",
						"          propertyPlantEquipment = body.quarterlyReports.propertyPlantEquipment,",
						"          reportedCurrency = body.quarterlyReports.reportedCurrency,",
						"          retainedEarnings = body.quarterlyReports.retainedEarnings,",
						"          shortLongTermDebtTotal = body.quarterlyReports.shortLongTermDebtTotal,",
						"          shortTermDebt = body.quarterlyReports.shortTermDebt,",
						"          shortTermInvestments = body.quarterlyReports.shortTermInvestments,",
						"          totalAssets = body.quarterlyReports.totalAssets,",
						"          totalCurrentAssets = body.quarterlyReports.totalCurrentAssets,",
						"          totalCurrentLiabilities = body.quarterlyReports.totalCurrentLiabilities,",
						"          totalLiabilities = body.quarterlyReports.totalLiabilities,",
						"          totalNonCurrentAssets = body.quarterlyReports.totalNonCurrentAssets,",
						"          totalNonCurrentLiabilities = body.quarterlyReports.totalNonCurrentLiabilities,",
						"          totalShareholderEquity = body.quarterlyReports.totalShareholderEquity,",
						"          treasuryStock = body.quarterlyReports.treasuryStock,",
						"          symbol = body.symbol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:(concat($symbol,'.csv')),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestBalanceSheet')]",
				"[concat(variables('factoryId'), '/datasets/Balance_sheet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cashflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestCashFlow",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CashFlow",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     symbol as string",
						"}",
						"source(output(",
						"          body as (annualReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as long, changeInCashAndCashEquivalents as long, changeInExchangeRate as string, changeInInventory as long, changeInOperatingAssets as long, changeInOperatingLiabilities as long, changeInReceivables as long, depreciationDepletionAndAmortization as long, dividendPayout as string, dividendPayoutCommonStock as string, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as string, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as string, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as string, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], quarterlyReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as long, changeInCashAndCashEquivalents as string, changeInExchangeRate as string, changeInInventory as long, changeInOperatingAssets as string, changeInOperatingLiabilities as string, changeInReceivables as string, depreciationDepletionAndAmortization as long, dividendPayout as string, dividendPayoutCommonStock as string, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as string, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as string, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as string, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], symbol as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.quarterlyReports, body.quarterlyReports),",
						"     mapColumn(",
						"          capitalExpenditures = body.quarterlyReports.capitalExpenditures,",
						"          cashflowFromFinancing = body.quarterlyReports.cashflowFromFinancing,",
						"          cashflowFromInvestment = body.quarterlyReports.cashflowFromInvestment,",
						"          changeInCashAndCashEquivalents = body.quarterlyReports.changeInCashAndCashEquivalents,",
						"          changeInExchangeRate = body.quarterlyReports.changeInExchangeRate,",
						"          changeInInventory = body.quarterlyReports.changeInInventory,",
						"          changeInOperatingAssets = body.quarterlyReports.changeInOperatingAssets,",
						"          changeInOperatingLiabilities = body.quarterlyReports.changeInOperatingLiabilities,",
						"          changeInReceivables = body.quarterlyReports.changeInReceivables,",
						"          depreciationDepletionAndAmortization = body.quarterlyReports.depreciationDepletionAndAmortization,",
						"          dividendPayout = body.quarterlyReports.dividendPayout,",
						"          dividendPayoutCommonStock = body.quarterlyReports.dividendPayoutCommonStock,",
						"          dividendPayoutPreferredStock = body.quarterlyReports.dividendPayoutPreferredStock,",
						"          fiscalDateEnding = body.quarterlyReports.fiscalDateEnding,",
						"          netIncome = body.quarterlyReports.netIncome,",
						"          operatingCashflow = body.quarterlyReports.operatingCashflow,",
						"          paymentsForOperatingActivities = body.quarterlyReports.paymentsForOperatingActivities,",
						"          paymentsForRepurchaseOfCommonStock = body.quarterlyReports.paymentsForRepurchaseOfCommonStock,",
						"          paymentsForRepurchaseOfEquity = body.quarterlyReports.paymentsForRepurchaseOfEquity,",
						"          paymentsForRepurchaseOfPreferredStock = body.quarterlyReports.paymentsForRepurchaseOfPreferredStock,",
						"          proceedsFromIssuanceOfCommonStock = body.quarterlyReports.proceedsFromIssuanceOfCommonStock,",
						"          proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = body.quarterlyReports.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet,",
						"          proceedsFromIssuanceOfPreferredStock = body.quarterlyReports.proceedsFromIssuanceOfPreferredStock,",
						"          proceedsFromOperatingActivities = body.quarterlyReports.proceedsFromOperatingActivities,",
						"          proceedsFromRepaymentsOfShortTermDebt = body.quarterlyReports.proceedsFromRepaymentsOfShortTermDebt,",
						"          proceedsFromRepurchaseOfEquity = body.quarterlyReports.proceedsFromRepurchaseOfEquity,",
						"          proceedsFromSaleOfTreasuryStock = body.quarterlyReports.proceedsFromSaleOfTreasuryStock,",
						"          profitLoss = body.quarterlyReports.profitLoss,",
						"          reportedCurrency = body.quarterlyReports.reportedCurrency,",
						"          symbol = body.symbol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:(concat($symbol,'.csv')),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestCashFlow')]",
				"[concat(variables('factoryId'), '/datasets/CashFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incomestatement')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestIncomestatement",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IncomeStatement",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     symbol as string",
						"}",
						"source(output(",
						"          body as (annualReports as (comprehensiveIncomeNetOfTax as long, costOfRevenue as long, costofGoodsAndServicesSold as long, depreciation as long, depreciationAndAmortization as long, ebit as long, ebitda as long, fiscalDateEnding as date, grossProfit as long, incomeBeforeTax as long, incomeTaxExpense as long, interestAndDebtExpense as integer, interestExpense as integer, interestIncome as string, investmentIncomeNet as string, netIncome as long, netIncomeFromContinuingOperations as long, netInterestIncome as integer, nonInterestIncome as string, operatingExpenses as long, operatingIncome as long, otherNonOperatingIncome as integer, reportedCurrency as string, researchAndDevelopment as long, sellingGeneralAndAdministrative as long, totalRevenue as long)[], quarterlyReports as (comprehensiveIncomeNetOfTax as long, costOfRevenue as long, costofGoodsAndServicesSold as long, depreciation as integer, depreciationAndAmortization as integer, ebit as long, ebitda as long, fiscalDateEnding as date, grossProfit as long, incomeBeforeTax as long, incomeTaxExpense as long, interestAndDebtExpense as integer, interestExpense as integer, interestIncome as string, investmentIncomeNet as string, netIncome as long, netIncomeFromContinuingOperations as long, netInterestIncome as integer, nonInterestIncome as string, operatingExpenses as long, operatingIncome as long, otherNonOperatingIncome as string, reportedCurrency as string, researchAndDevelopment as integer, sellingGeneralAndAdministrative as long, totalRevenue as long)[], symbol as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.quarterlyReports, body.quarterlyReports),",
						"     mapColumn(",
						"          comprehensiveIncomeNetOfTax = body.quarterlyReports.comprehensiveIncomeNetOfTax,",
						"          costOfRevenue = body.quarterlyReports.costOfRevenue,",
						"          costofGoodsAndServicesSold = body.quarterlyReports.costofGoodsAndServicesSold,",
						"          depreciation = body.quarterlyReports.depreciation,",
						"          depreciationAndAmortization = body.quarterlyReports.depreciationAndAmortization,",
						"          ebit = body.quarterlyReports.ebit,",
						"          ebitda = body.quarterlyReports.ebitda,",
						"          fiscalDateEnding = body.quarterlyReports.fiscalDateEnding,",
						"          grossProfit = body.quarterlyReports.grossProfit,",
						"          incomeBeforeTax = body.quarterlyReports.incomeBeforeTax,",
						"          incomeTaxExpense = body.quarterlyReports.incomeTaxExpense,",
						"          interestAndDebtExpense = body.quarterlyReports.interestAndDebtExpense,",
						"          interestExpense = body.quarterlyReports.interestExpense,",
						"          interestIncome = body.quarterlyReports.interestIncome,",
						"          investmentIncomeNet = body.quarterlyReports.investmentIncomeNet,",
						"          netIncome = body.quarterlyReports.netIncome,",
						"          netIncomeFromContinuingOperations = body.quarterlyReports.netIncomeFromContinuingOperations,",
						"          netInterestIncome = body.quarterlyReports.netInterestIncome,",
						"          nonInterestIncome = body.quarterlyReports.nonInterestIncome,",
						"          operatingExpenses = body.quarterlyReports.operatingExpenses,",
						"          operatingIncome = body.quarterlyReports.operatingIncome,",
						"          otherNonOperatingIncome = body.quarterlyReports.otherNonOperatingIncome,",
						"          reportedCurrency = body.quarterlyReports.reportedCurrency,",
						"          researchAndDevelopment = body.quarterlyReports.researchAndDevelopment,",
						"          sellingGeneralAndAdministrative = body.quarterlyReports.sellingGeneralAndAdministrative,",
						"          totalRevenue = body.quarterlyReports.totalRevenue,",
						"          symbol = body.symbol",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:(concat($symbol,'.csv')),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestIncomestatement')]",
				"[concat(variables('factoryId'), '/datasets/IncomeStatement')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource_test",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          body as (annualReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as long, changeInCashAndCashEquivalents as string, changeInExchangeRate as string, changeInInventory as integer, changeInOperatingAssets as long, changeInOperatingLiabilities as integer, changeInReceivables as long, depreciationDepletionAndAmortization as long, dividendPayout as long, dividendPayoutCommonStock as long, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as long, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as long, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as long, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], quarterlyReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as string, changeInCashAndCashEquivalents as string, changeInExchangeRate as string, changeInInventory as string, changeInOperatingAssets as string, changeInOperatingLiabilities as string, changeInReceivables as string, depreciationDepletionAndAmortization as integer, dividendPayout as integer, dividendPayoutCommonStock as integer, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as string, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as string, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as string, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], symbol as string),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource_test')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main Data Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "SymbolsRefData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@take(activity('Lookup1').output.value ,1)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Balancesheet",
											"type": "DataFlowReference",
											"parameters": {
												"symbol": {
													"value": "'@{item().ticker}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												},
												"sink1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Data flow2",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Data flow1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Cashflow",
											"type": "DataFlowReference",
											"parameters": {
												"symbol": {
													"value": "'@{item().ticker}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												},
												"sink1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Data flow3",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Data flow2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Incomestatement",
											"type": "DataFlowReference",
											"parameters": {
												"symbol": {
													"value": "'@{item().ticker}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												},
												"sink1": {
													"ticker": {
														"value": "@{item().ticker}",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-14T11:45:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SymbolsRefData')]",
				"[concat(variables('factoryId'), '/dataflows/Balancesheet')]",
				"[concat(variables('factoryId'), '/dataflows/Cashflow')]",
				"[concat(variables('factoryId'), '/dataflows/Incomestatement')]"
			]
		}
	]
}