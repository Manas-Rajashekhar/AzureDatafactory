{
	"name": "Balancesheet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestBalanceSheet",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Balance_sheet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     symbol as string",
				"}",
				"source(output(",
				"          body as (annualReports as (accumulatedDepreciationAmortizationPPE as string, capitalLeaseObligations as string, cashAndCashEquivalentsAtCarryingValue as long, cashAndShortTermInvestments as long, commonStock as long, commonStockSharesOutstanding as integer, currentAccountsPayable as long, currentDebt as long, currentLongTermDebt as string, currentNetReceivables as string, deferredRevenue as string, fiscalDateEnding as date, goodwill as long, intangibleAssets as long, intangibleAssetsExcludingGoodwill as long, inventory as long, investments as string, longTermDebt as long, longTermDebtNoncurrent as string, longTermInvestments as string, otherCurrentAssets as long, otherCurrentLiabilities as long, otherNonCurrentAssets as string, otherNonCurrentLiabilities as long, propertyPlantEquipment as long, reportedCurrency as string, retainedEarnings as long, shortLongTermDebtTotal as long, shortTermDebt as long, shortTermInvestments as integer, totalAssets as long, totalCurrentAssets as long, totalCurrentLiabilities as long, totalLiabilities as long, totalNonCurrentAssets as long, totalNonCurrentLiabilities as long, totalShareholderEquity as long, treasuryStock as long)[], quarterlyReports as (accumulatedDepreciationAmortizationPPE as string, capitalLeaseObligations as string, cashAndCashEquivalentsAtCarryingValue as long, cashAndShortTermInvestments as long, commonStock as long, commonStockSharesOutstanding as integer, currentAccountsPayable as long, currentDebt as long, currentLongTermDebt as string, currentNetReceivables as long, deferredRevenue as string, fiscalDateEnding as date, goodwill as long, intangibleAssets as long, intangibleAssetsExcludingGoodwill as long, inventory as long, investments as string, longTermDebt as long, longTermDebtNoncurrent as string, longTermInvestments as string, otherCurrentAssets as long, otherCurrentLiabilities as long, otherNonCurrentAssets as string, otherNonCurrentLiabilities as long, propertyPlantEquipment as long, reportedCurrency as string, retainedEarnings as long, shortLongTermDebtTotal as long, shortTermDebt as long, shortTermInvestments as string, totalAssets as long, totalCurrentAssets as long, totalCurrentLiabilities as long, totalLiabilities as long, totalNonCurrentAssets as long, totalNonCurrentLiabilities as long, totalShareholderEquity as long, treasuryStock as long)[], symbol as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
				"source1 foldDown(unroll(body.quarterlyReports, body.quarterlyReports),",
				"     mapColumn(",
				"          accumulatedDepreciationAmortizationPPE = body.quarterlyReports.accumulatedDepreciationAmortizationPPE,",
				"          capitalLeaseObligations = body.quarterlyReports.capitalLeaseObligations,",
				"          cashAndCashEquivalentsAtCarryingValue = body.quarterlyReports.cashAndCashEquivalentsAtCarryingValue,",
				"          cashAndShortTermInvestments = body.quarterlyReports.cashAndShortTermInvestments,",
				"          commonStock = body.quarterlyReports.commonStock,",
				"          commonStockSharesOutstanding = body.quarterlyReports.commonStockSharesOutstanding,",
				"          currentAccountsPayable = body.quarterlyReports.currentAccountsPayable,",
				"          currentDebt = body.quarterlyReports.currentDebt,",
				"          currentLongTermDebt = body.quarterlyReports.currentLongTermDebt,",
				"          currentNetReceivables = body.quarterlyReports.currentNetReceivables,",
				"          deferredRevenue = body.quarterlyReports.deferredRevenue,",
				"          fiscalDateEnding = body.quarterlyReports.fiscalDateEnding,",
				"          goodwill = body.quarterlyReports.goodwill,",
				"          intangibleAssets = body.quarterlyReports.intangibleAssets,",
				"          intangibleAssetsExcludingGoodwill = body.quarterlyReports.intangibleAssetsExcludingGoodwill,",
				"          inventory = body.quarterlyReports.inventory,",
				"          investments = body.quarterlyReports.investments,",
				"          longTermDebt = body.quarterlyReports.longTermDebt,",
				"          longTermDebtNoncurrent = body.quarterlyReports.longTermDebtNoncurrent,",
				"          longTermInvestments = body.quarterlyReports.longTermInvestments,",
				"          otherCurrentAssets = body.quarterlyReports.otherCurrentAssets,",
				"          otherCurrentLiabilities = body.quarterlyReports.otherCurrentLiabilities,",
				"          otherNonCurrentAssets = body.quarterlyReports.otherNonCurrentAssets,",
				"          otherNonCurrentLiabilities = body.quarterlyReports.otherNonCurrentLiabilities,",
				"          propertyPlantEquipment = body.quarterlyReports.propertyPlantEquipment,",
				"          reportedCurrency = body.quarterlyReports.reportedCurrency,",
				"          retainedEarnings = body.quarterlyReports.retainedEarnings,",
				"          shortLongTermDebtTotal = body.quarterlyReports.shortLongTermDebtTotal,",
				"          shortTermDebt = body.quarterlyReports.shortTermDebt,",
				"          shortTermInvestments = body.quarterlyReports.shortTermInvestments,",
				"          totalAssets = body.quarterlyReports.totalAssets,",
				"          totalCurrentAssets = body.quarterlyReports.totalCurrentAssets,",
				"          totalCurrentLiabilities = body.quarterlyReports.totalCurrentLiabilities,",
				"          totalLiabilities = body.quarterlyReports.totalLiabilities,",
				"          totalNonCurrentAssets = body.quarterlyReports.totalNonCurrentAssets,",
				"          totalNonCurrentLiabilities = body.quarterlyReports.totalNonCurrentLiabilities,",
				"          totalShareholderEquity = body.quarterlyReports.totalShareholderEquity,",
				"          treasuryStock = body.quarterlyReports.treasuryStock,",
				"          symbol = body.symbol",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:(concat($symbol,'.csv')),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}