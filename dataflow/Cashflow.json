{
	"name": "Cashflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RestCashFlow",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CashFlow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     symbol as string",
				"}",
				"source(output(",
				"          body as (annualReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as long, changeInCashAndCashEquivalents as long, changeInExchangeRate as string, changeInInventory as long, changeInOperatingAssets as long, changeInOperatingLiabilities as long, changeInReceivables as long, depreciationDepletionAndAmortization as long, dividendPayout as string, dividendPayoutCommonStock as string, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as string, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as string, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as string, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], quarterlyReports as (capitalExpenditures as long, cashflowFromFinancing as long, cashflowFromInvestment as long, changeInCashAndCashEquivalents as string, changeInExchangeRate as string, changeInInventory as long, changeInOperatingAssets as string, changeInOperatingLiabilities as string, changeInReceivables as string, depreciationDepletionAndAmortization as long, dividendPayout as string, dividendPayoutCommonStock as string, dividendPayoutPreferredStock as string, fiscalDateEnding as date, netIncome as long, operatingCashflow as long, paymentsForOperatingActivities as string, paymentsForRepurchaseOfCommonStock as string, paymentsForRepurchaseOfEquity as string, paymentsForRepurchaseOfPreferredStock as string, proceedsFromIssuanceOfCommonStock as string, proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet as string, proceedsFromIssuanceOfPreferredStock as string, proceedsFromOperatingActivities as string, proceedsFromRepaymentsOfShortTermDebt as string, proceedsFromRepurchaseOfEquity as long, proceedsFromSaleOfTreasuryStock as string, profitLoss as long, reportedCurrency as string)[], symbol as string),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
				"source1 foldDown(unroll(body.quarterlyReports, body.quarterlyReports),",
				"     mapColumn(",
				"          capitalExpenditures = body.quarterlyReports.capitalExpenditures,",
				"          cashflowFromFinancing = body.quarterlyReports.cashflowFromFinancing,",
				"          cashflowFromInvestment = body.quarterlyReports.cashflowFromInvestment,",
				"          changeInCashAndCashEquivalents = body.quarterlyReports.changeInCashAndCashEquivalents,",
				"          changeInExchangeRate = body.quarterlyReports.changeInExchangeRate,",
				"          changeInInventory = body.quarterlyReports.changeInInventory,",
				"          changeInOperatingAssets = body.quarterlyReports.changeInOperatingAssets,",
				"          changeInOperatingLiabilities = body.quarterlyReports.changeInOperatingLiabilities,",
				"          changeInReceivables = body.quarterlyReports.changeInReceivables,",
				"          depreciationDepletionAndAmortization = body.quarterlyReports.depreciationDepletionAndAmortization,",
				"          dividendPayout = body.quarterlyReports.dividendPayout,",
				"          dividendPayoutCommonStock = body.quarterlyReports.dividendPayoutCommonStock,",
				"          dividendPayoutPreferredStock = body.quarterlyReports.dividendPayoutPreferredStock,",
				"          fiscalDateEnding = body.quarterlyReports.fiscalDateEnding,",
				"          netIncome = body.quarterlyReports.netIncome,",
				"          operatingCashflow = body.quarterlyReports.operatingCashflow,",
				"          paymentsForOperatingActivities = body.quarterlyReports.paymentsForOperatingActivities,",
				"          paymentsForRepurchaseOfCommonStock = body.quarterlyReports.paymentsForRepurchaseOfCommonStock,",
				"          paymentsForRepurchaseOfEquity = body.quarterlyReports.paymentsForRepurchaseOfEquity,",
				"          paymentsForRepurchaseOfPreferredStock = body.quarterlyReports.paymentsForRepurchaseOfPreferredStock,",
				"          proceedsFromIssuanceOfCommonStock = body.quarterlyReports.proceedsFromIssuanceOfCommonStock,",
				"          proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet = body.quarterlyReports.proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet,",
				"          proceedsFromIssuanceOfPreferredStock = body.quarterlyReports.proceedsFromIssuanceOfPreferredStock,",
				"          proceedsFromOperatingActivities = body.quarterlyReports.proceedsFromOperatingActivities,",
				"          proceedsFromRepaymentsOfShortTermDebt = body.quarterlyReports.proceedsFromRepaymentsOfShortTermDebt,",
				"          proceedsFromRepurchaseOfEquity = body.quarterlyReports.proceedsFromRepurchaseOfEquity,",
				"          proceedsFromSaleOfTreasuryStock = body.quarterlyReports.proceedsFromSaleOfTreasuryStock,",
				"          profitLoss = body.quarterlyReports.profitLoss,",
				"          reportedCurrency = body.quarterlyReports.reportedCurrency,",
				"          symbol = body.symbol",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:(concat($symbol,'.csv')),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}